import asyncio
import random
from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from database import SessionPlayer, SessionState, Settings, Fant
from utils import session_scope, safe_answer, is_admin, get_settings

active_votes = {}

router = Router()

def is_group_chat(message: types.Message) -> bool:
    return message.chat.type in ("group", "supergroup")

@router.message(Command("start_game"))
async def start_game(message: types.Message):
    if not is_group_chat(message):
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    chat_id = message.chat.id

    with session_scope() as db:
        existing_state = db.query(SessionState).filter_by(chat_id=chat_id).first()
        if existing_state and existing_state.started:
            await safe_answer(message, "–≠–π, –≥–µ–Ω–∏–π, –∏–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç. –°–ª–µ–¥–∏ –∑–∞ —Å–æ–±—ã—Ç–∏—è–º–∏.")
            return

        players = db.query(SessionPlayer).all()

        if not players:
            await safe_answer(message, "–í–∞c –±—É–∫–≤–∞–ª—å–Ω–æ 0. –ò–≥—Ä–∞—Ç—å –±—É–¥–µ—Ç –≤–µ—Ç–µ—Ä –∏ –ø–µ—Å–æ–∫?")
            return

        settings = get_settings(db)
        min_players = settings.min_players if settings else 4

        if len(players) < min_players:
            await safe_answer(
                message,
                f"–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–∑–µ–π, –≤–∞—Å –º–∞–ª–æ. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_players}, –∞ —Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ {len(players)}."
            )
            return

        player_ids = [p.tg_id for p in players]
        random.shuffle(player_ids)

        state = SessionState(
            chat_id=chat_id,
            player_order=player_ids,
            current_index=0,
            round=1,
            started=True
        )
        db.merge(state)
        db.commit()

        players_dict = {p.tg_id: p.name for p in players}
        players_list = "\n".join(f"{idx+1}. {players_dict[player_id]}" for idx, player_id in enumerate(player_ids))

        await safe_answer(message, f"–î–ê –ù–ê–ß–ù–Å–¢–°–Ø –ñ–ï –í–ï–°–ï–õ–¨–ï!")

        from handlers.fant import start_turn
        await start_turn(message, db)

@router.message(Command("reset"))
async def reset_game(message: types.Message):
    if not is_group_chat(message):
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    if not await is_admin(message):
        await safe_answer(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É. –ú–æ–Ω–æ–∫—Ä–∞—Ç–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    with session_scope() as db:
        chat_id = message.chat.id
        db.query(SessionState).filter_by(chat_id=chat_id).delete()
        db.query(SessionPlayer).delete()
        db.commit()

        to_delete = [key for key in active_votes if key[0] == chat_id]
        for key in to_delete:
            del active_votes[key]

        await safe_answer(message, "–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—É—Å—Ç–æ—Ç—É.")

@router.message(Command("status"))
async def game_status(message: types.Message):
    if not is_group_chat(message):
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    chat_id = message.chat.id

    with session_scope() as db:
        state = db.query(SessionState).filter_by(chat_id=chat_id, started=True).first()
        if not state:
            await safe_answer(message, "–í–µ—Å–µ–ª—å–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å. –°—Ç–∞—Ç—É—Å: —É–Ω—ã–Ω–∏–µ.")
            return

        players = db.query(SessionPlayer).filter(SessionPlayer.tg_id.in_(state.player_order)).all()
        players_dict = {player.tg_id: player for player in players}

        if not players:
            await safe_answer(message, "–ó–¥–µ—Å—å –¥–∞–∂–µ –¥—Ä—É–∑–µ–π –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ –Ω–µ—Ç.")
            return

        current_player_id = state.player_order[state.current_index]
        current_player = players_dict.get(current_player_id)

        next_index = (state.current_index + 1) % len(state.player_order)
        next_player = players_dict.get(state.player_order[next_index])

        total_fants = db.query(Fant).filter_by(used=False).count()

        status_lines = []

        for idx, player_id in enumerate(state.player_order):
            player = players_dict.get(player_id)
            if not player:
                continue
            mark = "üü¢" if player.in_rotation else "‚è∏Ô∏è"
            pointer = "‚û°Ô∏è" if player_id == current_player_id else ""
            status_lines.append(f"{idx+1}. {mark} {player.name} {pointer}")

        status_text = "\n".join(status_lines)

        await safe_answer(
            message,
            f"üìã –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:\n\n"
            f"–†–∞—É–Ω–¥: {state.round}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–Ω—Ç–æ–≤: {total_fants}\n\n"
            f"{status_text}\n\n"
            f"–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: {current_player.name}\n"
            f"–°–ª–µ–¥—É—é—â–∏–π: {players_dict.get(state.player_order[next_index]).name}"
        )

@router.message(Command("end_game"))
async def end_game(message: types.Message):
    if message.chat.type not in ("group", "supergroup"):
        await safe_answer(message, "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    if not await is_admin(message):
        await safe_answer(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.")
        return

    with session_scope() as db:
        chat_id = message.chat.id
        db.query(SessionState).filter_by(chat_id=chat_id).delete()
        db.query(SessionPlayer).delete()
        db.commit()
        await safe_answer(message, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ. –í—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã.")

@router.message(Command("kick"))
async def cmd_kick_player(message: types.Message, command: CommandObject):
    if not is_group_chat(message):
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    if not await is_admin(message):
        await safe_answer(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —á–∏—Å—Ç–∫–∏.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await safe_answer(message, "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /kick <–∏–º—è –∏–≥—Ä–æ–∫–∞>")
        return

    player_name = args[1].strip()

    with session_scope() as db:
        player = db.query(SessionPlayer).filter_by(name=player_name).first()
        if not player:
            await safe_answer(message, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å—Ç—Ä–∞–¥–∞–ª—å—Ü–∞ –ø–æ –∏–º–µ–Ω–∏ '{player_name}'.")
            return

        db.delete(player)
        db.commit()

        await safe_answer(message, f"{player_name} –≤—ã–ª–µ—Ç–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã. –ù–∞–¥–µ—é—Å—å, –æ–Ω –Ω–µ —Å–∏–ª—å–Ω–æ —Ä–∞—Å—Å—Ç—Ä–æ–∏—Ç—Å—è.")
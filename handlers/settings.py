from aiogram import Router, types
from aiogram.filters import Command
from utils import session_scope, is_bot_admin, safe_answer, get_settings

router = Router()

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@router.message(Command("show_settings"))
async def show_settings(message: types.Message):
    with session_scope() as db:
        settings = get_settings(db)
        text = (
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"üë• –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {settings.min_players}\n"
            f"‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–∏–Ω–≥–æ–º: {settings.reminder_delay} —Å–µ–∫—É–Ω–¥\n"
            f"üìù –ö—Ç–æ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–Ω—Ç—ã: {'–í—Å–µ' if settings.add_mode == 'all' else '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω'}"
        )
        await safe_answer(message, text)

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
@router.message(Command("set_min_players"))
async def set_min_players(message: types.Message):
    if message.chat.type != "private":
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return

    if not await is_bot_admin(message.from_user.id):
        await safe_answer(message, "–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer(
            "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/set_min_players <—á–∏—Å–ª–æ>`\n–ü—Ä–∏–º–µ—Ä:\n`/set_min_players 5`",
            parse_mode="Markdown"
        )
        return

    min_players = int(args[1])
    if min_players < 2:
        await safe_answer(message, "–ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ ‚Äî 2.")
        return

    with session_scope() as db:
        settings = get_settings(db)
        settings.min_players = min_players
        db.commit()
        await safe_answer(message, f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: `{min_players}`")

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–∏–Ω–≥–æ–º
@router.message(Command("set_reminder_delay"))
async def set_reminder_delay(message: types.Message):
    if message.chat.type != "private":
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return

    if not await is_bot_admin(message.from_user.id):
        await safe_answer(message, "–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer(
            "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/set_reminder_delay <—Å–µ–∫—É–Ω–¥—ã>`\n–ü—Ä–∏–º–µ—Ä:\n`/set_reminder_delay 120`",
            parse_mode="Markdown"
        )
        return

    delay = int(args[1])
    if delay < 10:
        await safe_answer(message, "–ú–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥? –°–µ—Ä—å—ë–∑–Ω–æ?")
        return

    with session_scope() as db:
        settings = get_settings(db)
        settings.reminder_delay = delay
        db.commit()
        await safe_answer(message, f"‚úÖ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–∏–Ω–≥–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: `{delay}` —Å–µ–∫—É–Ω–¥.")

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–Ω—Ç–æ–≤
@router.message(Command("set_add_mode"))
async def set_add_mode(message: types.Message):
    if message.chat.type != "private":
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return

    if not await is_bot_admin(message.from_user.id):
        await safe_answer(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–µ–∂–∏–º–∞.")
        return

    args = message.text.split()
    if len(args) != 2 or args[1] not in ("all", "admin_only"):
        await message.answer(
            "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/set_add_mode all` –∏–ª–∏ `/set_add_mode admin_only`",
            parse_mode="Markdown"
        )
        return

    mode = args[1]

    with session_scope() as db:
        settings = get_settings(db)
        settings.add_mode = mode
        db.commit()
        readable_mode = "–≤—Å–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–Ω—Ç—ã" if mode == "all" else "—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–Ω—Ç—ã"
        await safe_answer(message, f"‚úÖ –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–Ω—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{readable_mode}`")

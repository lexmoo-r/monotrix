from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from fsm import AddFant
from database import SessionLocal, Fant
from keyboards import stop_adding_keyboard
from utils import is_private_chat, safe_answer, session_scope, safe_answer, is_bot_admin

router = Router()

@router.message(Command("add_fant"))
async def cmd_add_fant(message: types.Message, state: FSMContext):
    if not is_private_chat(message):
        await safe_answer(message, "–î–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–Ω—Ç—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º.")
        return

    await message.answer(
        "–í—Ä–µ–º—è —Å—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–º —É–Ω–∏–∂–µ–Ω–∏–π! –ö–∏–¥–∞–π —Ç–µ–∫—Å—Ç —Ñ–∞–Ω—Ç–∞ ‚Äî –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–¥–∏–Ω —Ñ–∞–Ω—Ç.\n"
        "–ö–æ–≥–¥–∞ —É—Å—Ç–∞–Ω–µ—à—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø–∏—à–∏ /stop.",
        reply_markup=stop_adding_keyboard()
    )
    await state.set_state(AddFant.waiting_for_fant)

@router.callback_query(F.data == "stop_adding")
async def stop_adding_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    await callback.message.answer("–í—Å—ë, –Ω–∞–≥–µ–Ω–µ—Ä–∏–ª—Å—è? –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    await state.clear()
    await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å –∫—Ä—É–∂–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —É –∫–Ω–æ–ø–∫–∏

@router.message(Command("stop"))
async def cmd_stop_adding(message: types.Message, state: FSMContext):
    if not is_private_chat(message):
        await safe_answer(message, "–î–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–Ω—Ç—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º.")
        return

    await message.answer("–û–∫–µ–π, —Ñ–∞–Ω—Ç–∞–∑–∏—è –∏—Å—Å—è–∫–ª–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    await state.clear()

@router.message(AddFant.waiting_for_fant, F.text)
async def process_fant(message: types.Message, state: FSMContext):
    if not is_private_chat(message):
        await safe_answer(message, "–î–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–Ω—Ç—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º.")
        return

    fant_text = message.text.strip()
    if not fant_text:
        await message.answer("–ü—É—Å—Ç—ã–µ —Ñ–∞–Ω—Ç—ã? –°–µ—Ä—å—ë–∑–Ω–æ? –ü–æ–ø—Ä–æ–±—É–π —Ö–æ—Ç—è –±—ã –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å –º—ã—Å–ª—å.")
        return

    db = SessionLocal()
    try:
        new_fant = Fant(
            text=fant_text,
            used=False,
            author_id=message.from_user.id,
            author_tag=message.from_user.username
        )
        db.add(new_fant)
        db.commit()
        await message.answer(
            "–ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –≤–µ–ª–∏–∫–∏–π —Ç—Ä—É–¥. –ö–∏–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π —à–µ–¥–µ–≤—Ä –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /stop, –µ—Å–ª–∏ —Ä—É—á–∫–∏ —É—Å—Ç–∞–ª–∏."
        )
    finally:
        db.close()

@router.message(Command("clear_fants"))
async def clear_fants(message: types.Message):
    if message.chat.type != "private":
        return

    if not await is_bot_admin(message.from_user.id):
        await safe_answer(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢—ã –Ω–µ –∞–¥–º–∏–Ω –ú–æ–Ω–æ–∫—Ä–∞—Ç–∏–∏.")
        return

    with session_scope() as db:
        db.query(Fant).delete()
        db.commit()
    await safe_answer(message, "‚úÖ –í—Å–µ —Ñ–∞–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")

@router.message(Command("reset_fants"))
async def reset_fants(message: types.Message):
    if message.chat.type != "private":
        return

    if not await is_bot_admin(message.from_user.id):
        await safe_answer(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ñ–∞–Ω—Ç—ã.")
        return

    with session_scope() as db:
        db.query(Fant).update({Fant.used: False})
        db.commit()
    await safe_answer(message, "‚úÖ –í—Å–µ —Ñ–∞–Ω—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã. –û–Ω–∏ —Å–Ω–æ–≤–∞ –≤ –∏–≥—Ä–µ.")

@router.message(Command("list_fants"))
async def list_fants(message: types.Message):
    if message.chat.type != "private":
        return

    if not await is_bot_admin(message.from_user.id):
        await safe_answer(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    with session_scope() as db:
        fants = db.query(Fant).all()
        if not fants:
            await safe_answer(message, "–í –±–∞–∑–µ –Ω–µ—Ç —Ñ–∞–Ω—Ç–æ–≤.")
            return

        text = "üìú –°–ø–∏—Å–æ–∫ —Ñ–∞–Ω—Ç–æ–≤:\n\n"
        for fant in fants:
            text += f"ID: {fant.id}\n–¢–µ–∫—Å—Ç: {fant.text}\n\n"

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        for i in range(0, len(text), 4000):
            await safe_answer(message, text[i:i+4000])

@router.message(Command("delete_fant"))
async def delete_fant(message: types.Message):
    if message.chat.type != "private":
        return

    if not await is_bot_admin(message.from_user.id):
        await safe_answer(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    args = message.text.strip().split()
    if len(args) != 2 or not args[1].isdigit():
        await safe_answer(message, "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `/delete_fant <ID>`", parse_mode="Markdown")
        return

    fant_id = int(args[1])

    with session_scope() as db:
        fant = db.query(Fant).filter_by(id=fant_id).first()
        if not fant:
            await safe_answer(message, f"–§–∞–Ω—Ç —Å ID {fant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        db.delete(fant)
        db.commit()
        await safe_answer(message, f"‚úÖ –§–∞–Ω—Ç —Å ID {fant_id} —É–¥–∞–ª—ë–Ω.")
import asyncio
import random
from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.sql import func
from database import SessionPlayer, SessionState, Fant
from sqlalchemy.orm.attributes import flag_modified
from utils import session_scope, safe_answer, get_settings, is_admin

router = Router()

# üÜï –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Å–∫–∞
current_ping_task = {}

def is_group_chat(message: types.Message) -> bool:
    return message.chat.type in ("group", "supergroup")

@router.message(Command("fant"))
async def get_fant(message: types.Message):
    if not is_group_chat(message):
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    with session_scope() as db:
        state = db.query(SessionState).filter_by(chat_id=chat_id, started=True).first()
        if not state:
            await safe_answer(message, "–í–µ—Å–µ–ª—å–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å. –°–∏–¥–∏ —Ä–æ–≤–Ω–æ.")
            return

        if state.player_order[state.current_index] != user_id:
            await safe_answer(message, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏, —Å–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª.")
            return

        fant = db.query(Fant).filter_by(used=False).order_by(func.random()).first()
        if not fant:
            await safe_answer(message, "–§–∞–Ω—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë–µ–∑—É–º–∏–µ —Ç–æ–∂–µ –∫–æ–≥–¥–∞-—Ç–æ –∫–æ–Ω—á–∞–µ—Ç—Å—è.")
            state.started = False
            db.commit()
            return

        fant.used = True
        db.commit()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–Ω—Ç–æ–≤
        players = db.query(SessionPlayer).filter(SessionPlayer.tg_id.in_(state.player_order)).all()
        players_dict = {player.tg_id: player for player in players}
        next_index = (state.current_index + 1) % len(state.player_order)
        next_player_id = state.player_order[next_index]
        next_player = players_dict.get(next_player_id)

        total_fants = db.query(Fant).filter_by(used=False).count()

        if next_player:
            next_player_info = f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫: {next_player.name}"
        else:
            next_player_info = "‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫)"

        await message.answer(
            f"–¢–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ:\n\n"
            f"{fant.text}\n\n"
            f"üìö –û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–Ω—Ç–æ–≤: {total_fants}\n"
            f"{next_player_info}"
        )

        # ‚¨áÔ∏è –°–¥–≤–∏–≥ –∏–Ω–¥–µ–∫—Å–∞ —Å–¥–µ–ª–∞–µ–º –≤ start_turn
        await start_turn(message, db, advance_turn=True)

@router.message(Command("punish"))
async def punish_self(message: types.Message):
    if not is_group_chat(message):
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    with session_scope() as db:
        state = db.query(SessionState).filter_by(chat_id=chat_id, started=True).first()
        if not state:
            await safe_answer(message, "–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç—Ä–æ–π —Å–µ–±–µ –≤–µ—Å–µ–ª—å–µ, –ø–æ—Ç–æ–º —É–∂–µ —Å—Ç—Ä–∞–¥–∞–π.")
            return

        if user_id not in state.player_order:
            await safe_answer(message, "–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è, –ø–æ—Ç–æ–º –ø—Ä–æ—Å–∏ —Ñ–∞–Ω—Ç.")
            return

        fant = db.query(Fant).filter_by(used=False).order_by(func.random()).first()
        if not fant:
            await safe_answer(message, "–§–∞–Ω—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –î–∞–∂–µ –Ω–∞–∫–∞–∑–∞—Ç—å —Ç–µ–±—è –Ω–µ—á–µ–º.")
            return

        fant.used = True
        db.commit()

        player = db.query(SessionPlayer).filter_by(tg_id=user_id).first()

        await message.answer(
            f"üî® @{player.name}, —Å–∞–º –Ω–∞–ø—Ä–æ—Å–∏–ª—Å—è! –ü–æ–ª—É—á–∏ —à—Ç—Ä–∞—Ñ–Ω–æ–π —Ñ–∞–Ω—Ç:\n\n"
            f"‚ö°Ô∏è {fant.text}\n\n"
            f"–°—Ç—Ä–∞–¥–∞–π –∫—Ä–∞—Å–∏–≤–æ."
        )

@router.message(Command("skip"))
async def skip_turn(message: types.Message):
    if not is_group_chat(message):
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    chat_id = message.chat.id

    with session_scope() as db:
        state = db.query(SessionState).filter_by(chat_id=chat_id, started=True).first()
        if not state:
            await safe_answer(message, "–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ö–æ–≥–æ —Ç—ã —Ç–∞–º —Ö–æ—á–µ—à—å —Å–∫–∏–ø–Ω—É—Ç—å?")
            return

        if not await is_admin(message):
            await safe_answer(message, "–¢—ã —á—Ç–æ, –∞–¥–º–∏–Ω? –ù–µ—Ç? –¢–æ–≥–¥–∞ —Ç–∏—Ö–æ —Å–∏–¥–∏.")
            return

        players = db.query(SessionPlayer).filter(SessionPlayer.tg_id.in_(state.player_order)).all()
        players_dict = {player.tg_id: player for player in players}
        next_index = (state.current_index + 1) % len(state.player_order)
        next_player = players_dict.get(state.player_order[next_index])

        await safe_answer(message, f"–•–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π –∫ —ç—à–∞—Ñ–æ—Ç—É: {next_player.name}")
        await start_turn(message, db, advance_turn=True)  # <- –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º —Ö–æ–¥ —á–µ—Ä–µ–∑ start_turn


@router.message(Command("pass"))
async def pass_turn(message: types.Message):
    if not is_group_chat(message):
        await safe_answer(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    with session_scope() as db:
        state = db.query(SessionState).filter_by(chat_id=chat_id, started=True).first()
        if not state:
            await safe_answer(message, "–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ß–µ–≥–æ —Ç—ã —Ç–∞–º –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å?")
            return

        current_player_id = state.player_order[state.current_index]
        if current_player_id != user_id:
            await safe_answer(message, "–ù–µ —Ç–≤–æ–π —Ö–æ–¥, –Ω–µ —Ç–µ–±–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å.")
            return

        player = db.query(SessionPlayer).filter_by(tg_id=user_id).first()
        if not player:
            await safe_answer(message, "–û—à–∏–±–∫–∞: –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–∏—Å—Ç–∏–∫–∞ –∫–∞–∫–∞—è-—Ç–æ.")
            return

        player.in_rotation = False
        db.commit()

        await safe_answer(message, "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥. –í–µ—Ä–Ω—ë—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫—Ä—É–≥–µ ‚Äî –µ—Å–ª–∏ –¥–æ–∂–∏–≤—ë—Ç–µ.")

        players = db.query(SessionPlayer).filter(SessionPlayer.tg_id.in_(state.player_order)).all()
        players_dict = {player.tg_id: player for player in players}

        await start_turn(message, db, advance_turn=True)  # <- –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º —Ö–æ–¥ —á–µ—Ä–µ–∑ start_turn

async def start_turn(message: types.Message, db, advance_turn: bool = True):
    global current_ping_task
    chat_id = message.chat.id
    state = db.query(SessionState).filter_by(chat_id=chat_id, started=True).first()
    if not state:
        await safe_answer(message, "–í–µ—Å–µ–ª—å–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å. –ü–æ—Ç–µ—Ä–ø–∏.")
        return

    # –°–¥–≤–∏–≥ —Ö–æ–¥–∞ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ advance_turn = True
    if advance_turn:
        state.current_index += 1
        if state.current_index >= len(state.player_order):
            # –ö–æ–Ω–µ—Ü –∫—Ä—É–≥–∞ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
            state.round += 1

            # üÜï –û–±–Ω–æ–≤–ª—è–µ–º player_order: –±–µ—Ä—ë–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã
            players = db.query(SessionPlayer).all()
            state.player_order = [player.tg_id for player in players]
            random.shuffle(state.player_order)
            flag_modified(state, "player_order")

            state.current_index = 0  # –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        db.commit()

    # –ë–µ—Ä—ë–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    players = db.query(SessionPlayer).filter(SessionPlayer.tg_id.in_(state.player_order)).all()
    players_dict = {player.tg_id: player for player in players}

    current_player_id = state.player_order[state.current_index]
    current_player = players_dict.get(current_player_id)

    if not current_player:
        await safe_answer(message, "–û—à–∏–±–∫–∞. –î–∞–∂–µ —É –Ω–∞—Å –±—ã–≤–∞—é—Ç —Å–±–æ–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ.")
        return

    # –ù–æ–≤—ã–π –∫—Ä—É–≥ –∏–ª–∏ 1-–π —Ä–∞—É–Ω–¥ ‚Äî –æ–±—ä—è–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    if state.current_index == 0 or state.round == 1:
        players_list = "\n".join(
            f"{idx + 1}. {players_dict[player_id].name}" for idx, player_id in enumerate(state.player_order)
        )
        await message.answer(
            f"üåÄ –†–∞—É–Ω–¥ {state.round}!\n\n"
            f"–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å:\n{players_list}"
        )

    # –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É –ø–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    task = current_ping_task.get(chat_id)
    if task and not task.done():
        task.cancel()

    current_ping_task[chat_id] = asyncio.create_task(ping_current_player(message, state.current_index))

async def ping_current_player(message: types.Message, start_index: int):
    try:
        with session_scope() as db:
            settings = get_settings(db)
            reminder_delay = settings.reminder_delay

        await asyncio.sleep(reminder_delay)

        with session_scope() as db:
            state = db.query(SessionState).filter_by(chat_id=message.chat.id, started=True).first()
            if not state or state.current_index != start_index:
                return

            players = db.query(SessionPlayer).filter(SessionPlayer.tg_id.in_(state.player_order)).all()
            players_dict = {player.tg_id: player for player in players}

            current_player = players_dict.get(state.player_order[state.current_index])

            if current_player:
                username_part = f" (@{current_player.username})" if current_player.username else ""
                await message.answer(
                    f"{current_player.name}{username_part}, /fant —Å–∞–º —Å–µ–±—è –Ω–µ –≤–æ–∑—å–º–µ—Ç, –∑–Ω–∞–µ—à—å –ª–∏."
                )
    except asyncio.CancelledError:
        pass 

@router.message(Command("reset_queue"))
async def reset_queue(message: types.Message):
    if message.chat.type not in ("group", "supergroup"):
        await safe_answer(message, "–°–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    chat_id = message.chat.id

    with session_scope() as db:
        players = db.query(SessionPlayer).all()
        if not players:
            await safe_answer(message, "–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤. –ö–æ–≥–æ —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —Ç–∞—Å–æ–≤–∞—Ç—å?")
            return

        player_ids = [p.tg_id for p in players]
        random.shuffle(player_ids)

        state = db.query(SessionState).filter_by(chat_id=chat_id).first()
        if not state:
            state = SessionState(chat_id=chat_id)

        state.player_order = player_ids
        state.current_index = 0
        state.round = 1
        state.started = True
        flag_modified(state, "player_order")
        db.merge(state)
        db.commit()

        players_dict = {p.tg_id: p.name for p in players}
        players_list = "\n".join(
            f"{idx + 1}. {players_dict[player_id]}" for idx, player_id in enumerate(player_ids)
        )

        await message.answer(
            f"‚ôªÔ∏è –û—á–µ—Ä–µ–¥—å —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫:\n{players_list}"
        )

        # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —Å –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        from handlers.fant import start_turn  # ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ
        await start_turn(message, db, advance_turn=False)  # –í–∞–∂–Ω–æ: –Ω–µ —Å–¥–≤–∏–≥–∞—Ç—å —Ö–æ–¥ —Å—Ä–∞–∑—É!

